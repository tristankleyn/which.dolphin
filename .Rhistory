jd1 <- d1 + days[[m1]]
d2 <- as.integer(substr(x, nchar(x)-11, nchar(x)-10))
m2 <- as.integer(substr(x, nchar(x)-9, nchar(x)-8))
jd2 <- d2 + days[[m2]]
diff <- jd2-jd1
print(sprintf('%s-%s', jd1, jd2))
hrs <- diff*20*24/60
effort <- effort + hrs
}
}
row <- data.frame(site=s, hours=effort, nAllEvents=nrow(sub))
for (sp in c('Dde', 'Ggr', 'Gme', 'Lac', 'Lal', 'Oor', 'Ttr')) {
row[[sp]] <- sum(sub$pred == sp)
}
df_classifications <- rbind(df_classifications, row)
}
df_classifications
seq(d1,d2,1)
d1
seq(jd1,jd2,)
#detection frame summary
df_detFrames <- data.frame()
df_effort <- data.frame()
for (s in sites) {
sub <- subset(df, site == s)
subc <- subset(sub, nc > 0)
subw <- subset(sub, nw > 0)
subb <- subset(sub, nc > 0 & nw > 0)
Nc <- nrow(subc)
Nw <- nrow(subw)
Nb <- nrow(subb)
mc <- mean(subc$nc)
mw <- mean(subw$nw)
totc <- sum(sub$nc)
totw <- sum(sub$nw)
#count effort in hours
effort <- 0
for (item in dir(base)) {
if (grepl(s, item)) {
x <- item
d1 <- as.integer(substr(x, nchar(x)-15, nchar(x)-14))
m1 <- as.integer(substr(x, nchar(x)-13, nchar(x)-12))
jd1 <- d1 + days[[m1]]
d2 <- as.integer(substr(x, nchar(x)-11, nchar(x)-10))
m2 <- as.integer(substr(x, nchar(x)-9, nchar(x)-8))
jd2 <- d2 + days[[m2]]
diff <- jd2-jd1
hrs <- diff*20*24/60
alldays <- seq(jd1,jd2,1)
for (item in alldays) {
minirow <- data.frame(site=s, day=item)
df_effort <- rbind(df_effort, minirow)
}
effort <- effort + hrs
}
}
row <- data.frame(site=s, hours=effort, nAllEvents=nrow(sub), nClickEvents=Nc, NWhistEvents=Nw, NBothEvents=Nb,
totalClickFrames=totc, meanClickFrames=mc, totalWhistFrames=totw, meanWhistFrames=mw)
df_detFrames <- rbind(df_detFrames, row)
}
df_detFrames
df_effort
1:12
site_effort <- data.frame()
for (s in sites) {
row <- data.frame(site = s)
for (i in 1:12) {
a <- days[[i]]
b <- days[[i+1]]
n <- nrow(subset(df_effort, site==s & day > a & day <= b))
row[[i]] <- n
site_effort <- rbind(site_effort, row)
}
}
write.table(df_detFrames, 'I:/MarineScotland/detectionframeSummary_score5.csv', sep=',', row.names=FALSE, col.names=TRUE)
row
i
a
b
n
row <- data.frame(site = s)
for (i in 1:12) {
a <- days[[i]]
b <- days[[i+1]]
n <- nrow(subset(df_effort, site==s & day > a & day <= b))
row[[as.integer(i)]] <- n
site_effort <- rbind(site_effort, row)
}
row
site_effort <- data.frame()
for (s in sites) {
row <- data.frame(site = s)
for (i in 1:12) {
a <- days[[i]]
b <- days[[i+1]]
n <- nrow(subset(df_effort, site==s & day > a & day <= b))
row[[as.integer(i)]] <- n
}
site_effort <- rbind(site_effort, row)
}
row
days <- list()
days[1] <- 0
days[2] <- 31
days[3] <- 59
days[4] <- 90
days[5] <- 120
days[6] <- 151
days[7] <- 181
days[8] <- 212
days[9] <- 243
days[10] <- 273
days[11] <- 304
days[12] <- 334
days[13] <- 1000
site_effort <- data.frame()
for (s in sites) {
row <- data.frame(site = s)
for (i in 1:12) {
a <- days[[i]]
b <- days[[i+1]]
n <- nrow(subset(df_effort, site==s & day > a & day <= b))
row[[as.integer(i)]] <- n
}
site_effort <- rbind(site_effort, row)
}
site_effort
s
row
monthnames <- c('January', 'February', 'March', 'April', 'May', 'June',
'July', 'August', 'September', 'October', 'November', 'December')
site_effort <- data.frame()
for (s in sites) {
row <- data.frame(site = s)
for (i in 1:12) {
a <- days[[i]]
b <- days[[i+1]]
n <- nrow(subset(df_effort, site==s & day > a & day <= b))
row[[monthnames[i]]] <- n
}
site_effort <- rbind(site_effort, row)
}
site_effort
write.table(site_effort, 'I:/MarineScotland/siteeffort.csv', sep=',', row.names = FALSE, col.names = TRUE)
site_effort*8
site_effort <- data.frame()
for (s in sites) {
row <- data.frame(site = s)
for (i in 1:12) {
a <- days[[i]]
b <- days[[i+1]]
n <- nrow(subset(df_effort, site==s & day > a & day <= b))
row[[monthnames[i]]] <- as.integer(n*8)
}
site_effort <- rbind(site_effort, row)
}
write.table(site_effort, 'I:/MarineScotland/siteeffort_hours.csv', sep=',', row.names = FALSE, col.names = TRUE)
library(ggplot2)
library(dplyr)
site <- 'arbroath'
sub <- read.csv(sprintf('I:/MarineScotland/hourdetections_%s.csv', site), fill=TRUE)
temp <- data.frame()
for (h in 0:23) {
subsub <- subset(sub, HR == h)
means <- c()
for (j in 1:30) {
subsamp <- sample_n(subsub, 30)
m <- mean(subsamp$detection)
means <- append(means, m)
}
row <- data.frame(hr=h, mean=mean(means), std=sd(means))
temp <- rbind(temp, row)
}
temp$lower <- temp$mean - 1*temp$std
temp$upper <- temp$mean + 1*temp$std
sub
diff
diff*20*24/60
diff*8
20*24/60
30*24
8/24
720/3
library(tidyverse)
library(rvest)
library(janitor)
library(dbplyr)
library(ggplot2)
library(RSQLite)
library(DBI)
library(shiny)
library(shinyWidgets)
library(randomForest)
model <- readRDS('EventClassifier_7sp.rds')
library(tidyverse)
library(rvest)
library(janitor)
library(dbplyr)
library(ggplot2)
library(RSQLite)
library(DBI)
library(shiny)
library(shinyWidgets)
library(randomForest)
library(DT)
library(shinyjs)
model <- readRDS('EventClassifier_7sp.rds')
options(shiny.maxRequestSize=1000*1024^2)
source('appFunctions.R')
server <- function(input, output, session) {
process_data <- reactive({
req(input$file1)
print(input$file1)
shinyjs::show("loading")
db_con <- dbConnect(RSQLite::SQLite(), input$file1$datapath)
on.exit(dbDisconnect(db_con))
dateRange <- input$dateRange
testevents <- processdataRocca(db_con, dateRange)[[1]]
list(df=testevents)
})
predictions <- reactive ({
test_events <- process_data()$df
probs <- data.frame(predict(model, test_events, type='prob'))
predspecieslist <- c('Common', 'Rissos', 'LF pilot whale', 'Atlantic white-sided',
'White-beaked', 'Orca', 'Bottlenose')
pred_df <- data.frame()
for (i in 1:dim(probs)[1]) {
row <- as.numeric(probs[i, ])
pred <- predspecieslist[which.max(row)]
conf <- max(row)
prom <- row[rev(order(row))][1] - row[rev(order(row))][2]
score <- prom*conf
predrow <- data.frame(eventID=test_events$eventID[i], clicks=as.integer(test_events$clicks[i]), whistles=as.integer(test_events$whistles[i]),
duration=test_events$duration[i], predictedSpecies=pred, score=score, prom=prom, conf=conf)
spcount <- 1
for (sp in predspecieslist) {
predrow[[sp]] <- row[spcount]
spcount <- spcount + 1
}
pred_df <- rbind(pred_df, predrow)
}
allpreds <- pred_df
pred_df <- subset(pred_df, clicks >= input$minClicks)
pred_df <- subset(pred_df, whistles >= input$minWhistles)
pred_df <- subset(pred_df, score >= input$evScore)
evScore <- input$evScore
list(preds=pred_df, allpreds=allpreds, evScore=evScore)
})
output$plt <- renderPlot({
req(input$file1)
plot_data <- predictions()
shinyjs::hide("loading")
df <- plot_data$preds
x <- seq(0,1,0.01)
y <- as.numeric(plot_data$evScore)/x
thr <- data.frame(x=x, y=y)
custom_colors <- c('Common'='royalblue',
'Rissos'='darkred',
'LF pilot whale'='forestgreen',
'Atlantic white-sided'='purple',
'White-beaked'='grey',
'Orca'='orange',
'Bottlenose'='turquoise')
all_levels <- c("Common", "Rissos", "LF pilot whale", "Atlantic white-sided", "White-beaked", "Orca", "Bottlenose")
df$predictedSpecies <- factor(df$predictedSpecies, levels = all_levels)
df_full <- data.frame(predictedSpecies = all_levels) %>%
left_join(df %>% count(predictedSpecies), by = "predictedSpecies") %>%
mutate(n = ifelse(is.na(n), 0, n))
ggplot(data = df_full, aes(x = predictedSpecies, y=n, fill = predictedSpecies)) +
geom_bar(stat='identity', fill='#a6b8a6', color = "#a6b8a6") +
theme_minimal() +
scale_y_continuous(
breaks = seq(1, max(df_full$n), by = as.integer(max(df_full$n)/10))) +
theme(
axis.text.x = element_text(size = 12),
axis.ticks.x = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
axis.line.x = element_blank(),
legend.position = "none")
}, width = 900, height = 300, res = 96)
output$table1 <- renderDT({
show_table <- predictions()$preds
shinyjs::hide("loading")
ind <- which(names(show_table) == 'score')
show_table <- show_table[,1:ind]
show_table <- show_table[, !(names(show_table) %in% c('prom', 'conf'))]
show_table$duration <- as.integer(show_table$duration)
datatable(show_table, options=list(pageLength=10, dom='tip', paging=TRUE)) %>% formatRound(columns = c("score"), digits = 3)
})
output$downloadFiltered <- downloadHandler(
filename = function() {
paste("ClassifiedEvents", Sys.Date(), ".csv", sep = "")
},
content = function(file) {
write.csv(predictions()$preds, file, row.names = FALSE)
}
)
output$downloadAllData <- downloadHandler(
filename = function() {
paste("AllEvents", Sys.Date(), ".csv", sep = "")
},
content = function(file) {
write.csv(predictions()$allpreds, file, row.names = FALSE)
}
)
}
shinyApp(ui, server)
library(tidyverse)
library(rvest)
library(janitor)
library(dbplyr)
library(ggplot2)
library(RSQLite)
library(DBI)
library(shiny)
library(shinyWidgets)
library(randomForest)
library(DT)
library(shinyjs)
model <- readRDS('EventClassifier_7sp.rds')
library(tidyverse)
library(rvest)
library(janitor)
library(dbplyr)
library(ggplot2)
library(RSQLite)
library(DBI)
library(shiny)
library(shinyWidgets)
library(randomForest)
library(DT)
library(shinyjs)
model <- readRDS('EventClassifier_7sp.rds')
options(shiny.maxRequestSize=1000*1024^2)
library(randomForest)
library(dplyr)
data <- read.csv('I:/3CHAPTER/combined_all.csv', fill=TRUE)
data
results = data.frame()
for (i in 1:dim(data)[1]) {
enc <- data$enc_id[i]
train <- subset(data, enc_id != enc)
test <- subset(data, enc_id == enc)
sp <- test$sp
nc <- test$nc
nw <- test$nw
ind <- which(names(test) == 'Dde_c')
samp_sizes <- rep(min(table(data$species)), length(unique(data$species)))
m <- randomForest(as.factor(species) ~ Dde_c + Ggr_c + Gme_c + Lal_c + Ttr_c + Dde_w + Ggr_w + Gme_w + Lac_w + Lal_w + Oor_w + Ttr_w,
data = train, strata=as.factor(train$species), ntree = 500, replace = FALSE, sampsize=c(samp_sizes))
probs <- predict(m, newdata = test, type = "prob")
prob_order <- rev(order(c(probs)))
prom <- probs[prob_order[1]] - probs[prob_order[2]]
conf <- probs[prob_order[1]]
pred <- unique(data$species)[which.max(probs)]
print(sprintf('Encounter %s (%s): %s', enc, sp, pred))
row <- data.frame(species=sp, enc_id=enc, nc=nc, nw=nw, conf=conf, prom=prom, pred=pred)
results <- rbind(results, row)
}
days <- list()
days[1] <- 0
days[2] <- 31
days[3] <- 59
days[4] <- 90
days[5] <- 120
days[6] <- 151
days[7] <- 181
days[8] <- 212
days[9] <- 243
days[10] <- 273
days[11] <- 304
days[12] <- 334
days[13] <- 1000
monthnames <- c('January', 'February', 'March', 'April', 'May', 'June',
'July', 'August', 'September', 'October', 'November', 'December')
base <- 'I:/MarineScotland/detections'
sites <- c('arbroath', 'cromarty', 'crudenbay', 'fraserburgh', 'helmsdale', 'latheron', 'speybay', 'stabbs', 'standrews', 'stonehaven')
df <- data.frame()
for (s in sites) {
x <- read.csv(sprintf('I:/MarineScotland/classifications/allevents/%s.csv', s), fill=TRUE)
df <- rbind(df, x)
}
df <- subset(df, site %in% sites)
df <- subset(df, score >= 0.05)
#detection frame summary
df_detFrames <- data.frame()
df_effort <- data.frame()
for (s in sites) {
sub <- subset(df, site == s)
subc <- subset(sub, nc > 0)
subw <- subset(sub, nw > 0)
subb <- subset(sub, nc > 0 & nw > 0)
Nc <- nrow(subc)
Nw <- nrow(subw)
Nb <- nrow(subb)
mc <- mean(subc$nc)
mw <- mean(subw$nw)
totc <- sum(sub$nc)
totw <- sum(sub$nw)
#count effort in hours
effort <- 0
for (item in dir(base)) {
if (grepl(s, item)) {
x <- item
d1 <- as.integer(substr(x, nchar(x)-15, nchar(x)-14))
m1 <- as.integer(substr(x, nchar(x)-13, nchar(x)-12))
jd1 <- d1 + days[[m1]]
d2 <- as.integer(substr(x, nchar(x)-11, nchar(x)-10))
m2 <- as.integer(substr(x, nchar(x)-9, nchar(x)-8))
jd2 <- d2 + days[[m2]]
diff <- jd2-jd1
hrs <- diff*20*24/60
alldays <- seq(jd1,jd2,1)
for (item in alldays) {
minirow <- data.frame(site=s, day=item)
df_effort <- rbind(df_effort, minirow)
}
effort <- effort + hrs
}
}
row <- data.frame(site=s, hours=effort, nAllEvents=nrow(sub), nClickEvents=Nc, NWhistEvents=Nw, NBothEvents=Nb,
totalClickFrames=totc, meanClickFrames=mc, totalWhistFrames=totw, meanWhistFrames=mw)
df_detFrames <- rbind(df_detFrames, row)
}
df_detFrames
site_effort <- data.frame()
for (s in sites) {
row <- data.frame(site = s)
for (i in 1:12) {
a <- days[[i]]
b <- days[[i+1]]
n <- nrow(subset(df_effort, site==s & day > a & day <= b))
row[[monthnames[i]]] <- as.integer(n*8)
}
site_effort <- rbind(site_effort, row)
}
write.table(df_detFrames, 'I:/MarineScotland/detectionframeSummary_score5.csv', sep=',', row.names=FALSE, col.names=TRUE)
write.table(site_effort, 'I:/MarineScotland/siteeffort_hours.csv', sep=',', row.names = FALSE, col.names = TRUE)
#species classification summary
df_classifications <- data.frame()
for (s in sites) {
sub <- subset(df, site == s)
print('')
print(s)
#count effort in hours
effort <- 0
for (item in dir(base)) {
if (grepl(s, item)) {
x <- item
d1 <- as.integer(substr(x, nchar(x)-15, nchar(x)-14))
m1 <- as.integer(substr(x, nchar(x)-13, nchar(x)-12))
jd1 <- d1 + days[[m1]]
d2 <- as.integer(substr(x, nchar(x)-11, nchar(x)-10))
m2 <- as.integer(substr(x, nchar(x)-9, nchar(x)-8))
jd2 <- d2 + days[[m2]]
diff <- jd2-jd1
print(sprintf('%s-%s', jd1, jd2))
hrs <- diff*20*24/60
effort <- effort + hrs
}
}
row <- data.frame(site=s, hours=effort, nAllEvents=nrow(sub))
for (sp in c('Dde', 'Ggr', 'Gme', 'Lac', 'Lal', 'Oor', 'Ttr')) {
row[[sp]] <- sum(sub$pred == sp)
}
df_classifications <- rbind(df_classifications, row)
}
df_classifications
write.table(df_classifications, 'I:/MarineScotland/classificationsSummary_score5.csv', sep=',', row.names=FALSE, col.names=TRUE)
#expected values
CMavg <- read.csv('I:/MarineScotland/performance/CM_eventscore5_avg.csv')
CMsd <- read.csv('I:/MarineScotland/performance/CM_eventscore5_sd.csv')
s <- 'arbroath'
sub <- subset(df_classifications, site == s)
expCC <- c()
expIC <- c()
countSp1 <- 1
splist <- unique(df$pred)[order(unique(df$pred))]
for (sp1 in splist) {
expCC[[sp1]] <- 0
expIC[[sp1]] <- 0
Nsp1 <- as.integer(sub[[sp1]])
rate_sp1 <- as.numeric(CMavg[[sp1]][countSp1])
expCC[[sp1]] <- expCC[[sp1]] + (Nsp1*rate_sp1)
for (sp2 in splist) {
if (sp1 != sp2) {
Nsp2 <- as.integer(sub[[sp2]])
rate_sp2 <- as.numeric(CMavg[[sp2]][countSp1])
expIC[[sp1]] <- expIC[[sp1]] + (Nsp2*rate_sp2)
}
}
countSp1 <- countSp1 + 1
}
expected <- data.frame()
for (sp in splist) {
row <- data.frame(species=sp, site=s)
obs <- as.integer(sub[[sp]])
row$obs <- as.integer(sub[[sp]])
exp <- expCC[[sp]] + expIC[[sp]]
row$exp <- exp
row$likelyTrue <- expCC[[sp]]/exp
row$likelyFalse <- expIC[[sp]]/exp
row$nTrue <- expCC[[sp]]*obs/exp
row$nFalse <- expIC[[sp]]*obs/exp
expected <- rbind(expected, row)
}
# (1) Set the appropriate working directory
dir_path <- tcltk::tk_choose.dir(caption="Select folder with eventClassifier")
setwd(dir_path)
# (4) Run app
shiny::runApp('eventClassifier')
