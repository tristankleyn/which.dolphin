f <- substr(singleFile, 1, nchar(singleFile)-4)
name <- gsub(' ', '', paste(name, '_', f))
}
createWhistleSpectra(wdata=wfilt, bwdata=bwdata, temp_res=temp_res, startrect0=0, startrec=startrec, endrec=endrec, site=site, f0=0, f1=7200,
min_combined_bandwidth = 0, min_bandwidth = 0, dd_thr=0.0, include_empty=TRUE, remove_dups=FALSE,
dest=sprintf('%s/%s/whistlespectra_%s.csv', savefolder, site, name))
}
}
}
} else {
dbDisconnect(con)
}
}
path <- 'I:/temp/test2201'
createWhistleSpectra <- function(wdata, bwdata, temp_res, dest='temp.csv', file='whistlespectra.csv', startrect0=NULL,
f0=2000, f1=20000,
w=4, step=1, dd_thr=0.05, min_combined_bandwidth=0, min_bandwidth=0, include_empty=FALSE,
maxout=1800, site=NULL, startrec=NULL, endrec=NULL, remove_dups=FALSE) {
t0 <- 0
data <- data.frame()
starts <- c()
dd <- c()
if (max(wdata$t) > maxout) {
maxt <- maxout
} else {
maxt <- max(wdata$t)
}
while (t0 < maxt) {
t1 <- t0 + w
inds <- as.numeric(rownames(subset(wdata, t >= t0 & t < t1)))
binary_inds <- c()
for (ind in inds) {
binary_inds <- append(binary_inds, which(as.numeric(ind) == as.numeric(rownames(wdata))))
}
if (length(binary_inds) > 0) {
ctr <- c()
bandwidths <- c()
dt <- c()
for (i in binary_inds) {
ctr <- append(ctr, bwdata[[i]]$contour*temp_res)
bandwidths <- append(bandwidths, max(ctr)-min(ctr))
ns <- bwdata[[i]]$nSlices
L <- bwdata[[i]]$sampleDuration/sr
dt <- append(dt, L/ns)
}
dt <- mean(dt)
y <- c()
fstep = as.integer((f1-f0)/180)
f <- seq(f0, f1-fstep, fstep)
den <- length(ctr)/(w/dt)
combined_bandwidth <- max(ctr) - min(ctr)
if (all(ctr) < 50) {
ctr <- ctr*1000
}
if (den >= dd_thr & combined_bandwidth >= min_combined_bandwidth & all(bandwidths >= min_bandwidth)) {
for (i in f) {
y <- append(y, sum(ctr >= i & ctr < i+fstep)/length(ctr))
}
data <- rbind(data, y)
dd <- append(dd, den)
starts <- append(starts, startrect0 + t0)
t0 <- t0 + step
} else {
t0 <- t0 + step
}
} else {
if (include_empty==TRUE) {
print(f0)
print(f1)
print(fstep)
f <- seq(f0, f1-fstep, fstep)
y <- rep(0, length(f))
data <- rbind(data, y)
dd <- append(dd, 0)
starts <- append(starts, startrect0 + t0)
}
t0 <- t0 + step
}
}
if (dim(data)[1] > 0) {
print(dim(data))
names(data) <- seq(1, dim(data)[2])
data <- cbind(dd=dd, data)
data <- cbind(dur=w, data)
data <- cbind(starttime = starts, data)
data <- cbind(endrec=endrec, data)
data <- cbind(startrec=startrec, data)
data <- cbind(site=site, data)
if (remove_dups == TRUE) {
newdata <- data.frame()
for (k in 1:nrow(data)) {
if (k == 1) {
newdata <- rbind(newdata, data[k,])
} else {
if (data$dd[k] != data$dd[k-1]) {
newdata <- rbind(newdata, data[k,])
}
}
}
data <- newdata
}
write.table(data, dest, sep=',', quote=TRUE, row.names=FALSE, col.names = TRUE)
print(sprintf('Done. Saved %s whistle %ss-detection frames to file.', dim(data)[1], w))
}
}
savefolder <- 'C:/Users/tk81/Downloads/whaleTest/results'               #INPUT FOLDER PATH FOR SAVING RESULTS TO
binaryfolder <- 'C:/Users/tk81/Downloads/whaleTest/binary'     #INPUT FOLDER PATH WHERE PAMGUARD BINARY DATA IS STORED
dbfolder <- 'C:/Users/tk81/Downloads/whaleTest'                #INPUT FOLDER PATH WHERE PAMGUARD DATABASES ARE STORED
fileN1 <- 1
fileN2 <- length(dir(dbfolder))
fileN2 <- 1
site <- 'test1'
selectdb <- 'test1'
singleFile <- NULL
GENERATE_CLICKS <- FALSE
GENERATE_WHISTLES <- TRUE
if (!is.null(selectdb)) {
binaryfolder <- gsub(' ', '', paste(binaryfolder, '/', selectdb))
selectdb <- gsub(' ', '', paste(selectdb, '.sqlite3'))
}
for (fileN in fileN1:fileN2) {
filename <- dir(dbfolder)[fileN]
if (!is.null(selectdb)) {
filename <- selectdb
}
print(sprintf('Loading file %s/%s: %s', fileN, fileN2, filename))
dbname = sprintf('%s/%s', dbfolder, filename)
con <- dbConnect(drv=RSQLite::SQLite(), dbname=dbname)
tables <- dbListTables(con)
if (length(tables) > 0) {
saq <- dbGetQuery(conn=con, statement="SELECT * FROM Sound_Acquisition")
saq$SystemName <- str_remove_all(saq$SystemName, " ")
if (!is.null(singleFile)) {
saq <- subset(saq, SystemName==singleFile)
}
for (item in unique(saq$Status)) {
if (grepl("Start", item)) {
saq <- subset(saq, Status == item)
}
}
dbDisconnect(con)
sr <- as.integer(saq$sampleRate[1])
temp_res <- 0.0213333                       #INPUT TEMPORAL RESOLUTION OF FFT USED FOR WHISTLE DETECTION
myStudy <- retrieveDetections(dbname=dbname, binaryfolder=binaryfolder, sr=sr)
##GENERATE CLICK DETECTION FRAMES
if (GENERATE_CLICKS == TRUE) {
clickInfo <- clickData(myStudy, fft=as.integer(.00533333*sr)+1, selectEvent=singleFile)
cdata <- clickInfo[[1]]
if (class(cdata) == 'data.frame') {
if (dim(cdata)[1] > 1) {
noise <- clickInfo[[4]]
noise[is.na(noise)] <- 0
newnoise <- c()
for (i in 1:length(noise)) {
if (i < length(noise)) {
n1 <- noise[i]
n2 <- noise[i+1]
new <- seq(n1, n2, (n2-n1)/17)
new <- new[1:length(new)-1]
for (val in new) {
newnoise <- append(newnoise, val)
}
} else {
newnoise <- append(newnoise, noise[i])
}
}
noise <- newnoise - min(newnoise)
a <- saq$UTC[1]
hr1 <- hour(a)
min1 <- minute(a)
sec1 <- second(a)
time1 <- 3600*hr1 + 60*min1 + sec1
a <- cdata$UTC[1]
hr2 <- hour(a)
min2 <- minute(a)
sec2 <- second(a)
time2 <- 3600*hr2 + 60*min2 + sec2
dt <- time2 - time1
cfilt <- filterClicks(cdata, dt=0)
if (dim(cfilt)[1] > 1) {
startrec <- cfilt$eventId[1]
endrec <- cfilt$eventId[dim(cfilt)[1]]
avSpec <- calculateAverageSpectra(myStudy, ev=startrec, window=FALSE,
wl=as.integer(.00533333*sr)+1, noise=FALSE,
plot=c(FALSE, FALSE))
spec <- avSpec$allSpec[,avSpec$UID %in% cfilt$UID]
nspec <- noise
if (sum(nspec) != 0) {
if (is.null(dim(nspec))) {
x <- nspec
L <- 1
} else {
x <- rowMeans(nspec)
L <- dim(nspec)[2]
}
y0 <- as.integer(10*length(x)/(sr/2000))
y1 <- as.integer(40*length(x)/(sr/2000))
n <- rollmeanr(x, k=3)
n <- n[y0:y1]
n <- n - min(n)
n <- n/sum(n)
ndata <- data.frame()
ndata <- rbind(ndata, n)
names(ndata) <- seq(1, dim(ndata)[2])
ndata <- cbind(n=L, ndata)
ndata <- cbind(rec_id=startrec, ndata)
ndata <- cbind(site='none', ndata)
rec0 <- startrec
}
ind1 <- gregexpr('_', filename)[[1]][1]
ind2 <- gregexpr('.sqlite', filename)[[1]][1]
name <- substr(filename, ind1+1, ind2-1)
if (!is.null(singleFile)) {
f <- substr(singleFile, 1, nchar(singleFile)-4)
name <- gsub(' ', '', paste(name, '_', f))
}
createClickSpectra(subsub=cfilt, spec=spec, nspec=nspec, site=site, nmin=3, sr=sr,
startrect0=0, startrec=startrec, endrec=endrec, include_empty = TRUE, remove_dups=FALSE,
dest=sprintf('%s/clickspectra_%s.csv', savefolder, name), file=NULL)
}
}
}
}
#GENERATE WHISTLE DETECTION FRAMES
if (GENERATE_WHISTLES == TRUE) {
whistleInfo <- whistleData(myStudy, selectEvent=singleFile)
wdata <- whistleInfo[[1]]
bwdata <- whistleInfo[[2]]
if (class(wdata) == 'data.frame') {
if (dim(wdata)[1] > 1) {
a <- saq$UTC[1]
hr1 <- hour(a)
min1 <- minute(a)
sec1 <- second(a)
time1 <- 3600*hr1 + 60*min1 + sec1
a <- wdata$UTC[1]
hr2 <- hour(a)
min2 <- minute(a)
sec2 <- second(a)
time2 <- 3600*hr2 + 60*min2 + sec2
dt <- time2-time1
wfilt <- filterWhistles(wdata, dt=0)
ind1 <- gregexpr('_', filename)[[1]][1]
ind2 <- gregexpr('.sqlite', filename)[[1]][1]
name <- substr(filename, ind1+1, ind2-1)
if (!is.null(singleFile)) {
f <- substr(singleFile, 1, nchar(singleFile)-4)
name <- gsub(' ', '', paste(name, '_', f))
}
createWhistleSpectra(wdata=wfilt, bwdata=bwdata, temp_res=temp_res, startrect0=0, startrec=startrec, endrec=endrec, site=site, f0=0, f1=7200,
min_combined_bandwidth = 0, min_bandwidth = 0, dd_thr=0.0, include_empty=TRUE, remove_dups=FALSE,
dest=sprintf('%s/%s/whistlespectra_%s.csv', savefolder, site, name))
}
}
}
} else {
dbDisconnect(con)
}
}
createWhistleSpectra <- function(wdata, bwdata, temp_res, dest='temp.csv', file='whistlespectra.csv', startrect0=NULL,
f0=2000, f1=20000,
w=4, step=1, dd_thr=0.05, min_combined_bandwidth=0, min_bandwidth=0, include_empty=FALSE,
maxout=1800, site=NULL, startrec=NULL, endrec=NULL, remove_dups=FALSE) {
t0 <- 0
data <- data.frame()
starts <- c()
dd <- c()
fstep = as.integer((f1-f0)/180)
if (max(wdata$t) > maxout) {
maxt <- maxout
} else {
maxt <- max(wdata$t)
}
while (t0 < maxt) {
t1 <- t0 + w
inds <- as.numeric(rownames(subset(wdata, t >= t0 & t < t1)))
binary_inds <- c()
for (ind in inds) {
binary_inds <- append(binary_inds, which(as.numeric(ind) == as.numeric(rownames(wdata))))
}
if (length(binary_inds) > 0) {
ctr <- c()
bandwidths <- c()
dt <- c()
for (i in binary_inds) {
ctr <- append(ctr, bwdata[[i]]$contour*temp_res)
bandwidths <- append(bandwidths, max(ctr)-min(ctr))
ns <- bwdata[[i]]$nSlices
L <- bwdata[[i]]$sampleDuration/sr
dt <- append(dt, L/ns)
}
dt <- mean(dt)
y <- c()
f <- seq(f0, f1-fstep, fstep)
den <- length(ctr)/(w/dt)
combined_bandwidth <- max(ctr) - min(ctr)
if (all(ctr) < 50) {
ctr <- ctr*1000
}
if (den >= dd_thr & combined_bandwidth >= min_combined_bandwidth & all(bandwidths >= min_bandwidth)) {
for (i in f) {
y <- append(y, sum(ctr >= i & ctr < i+fstep)/length(ctr))
}
data <- rbind(data, y)
dd <- append(dd, den)
starts <- append(starts, startrect0 + t0)
t0 <- t0 + step
} else {
t0 <- t0 + step
}
} else {
if (include_empty==TRUE) {
f <- seq(f0, f1-fstep, fstep)
y <- rep(0, length(f))
data <- rbind(data, y)
dd <- append(dd, 0)
starts <- append(starts, startrect0 + t0)
}
t0 <- t0 + step
}
}
if (dim(data)[1] > 0) {
print(dim(data))
names(data) <- seq(1, dim(data)[2])
data <- cbind(dd=dd, data)
data <- cbind(dur=w, data)
data <- cbind(starttime = starts, data)
data <- cbind(endrec=endrec, data)
data <- cbind(startrec=startrec, data)
data <- cbind(site=site, data)
if (remove_dups == TRUE) {
newdata <- data.frame()
for (k in 1:nrow(data)) {
if (k == 1) {
newdata <- rbind(newdata, data[k,])
} else {
if (data$dd[k] != data$dd[k-1]) {
newdata <- rbind(newdata, data[k,])
}
}
}
data <- newdata
}
write.table(data, dest, sep=',', quote=TRUE, row.names=FALSE, col.names = TRUE)
print(sprintf('Done. Saved %s whistle %ss-detection frames to file.', dim(data)[1], w))
}
}
savefolder <- 'C:/Users/tk81/Downloads/whaleTest/results'               #INPUT FOLDER PATH FOR SAVING RESULTS TO
binaryfolder <- 'C:/Users/tk81/Downloads/whaleTest/binary'     #INPUT FOLDER PATH WHERE PAMGUARD BINARY DATA IS STORED
dbfolder <- 'C:/Users/tk81/Downloads/whaleTest'                #INPUT FOLDER PATH WHERE PAMGUARD DATABASES ARE STORED
fileN1 <- 1
fileN2 <- length(dir(dbfolder))
fileN2 <- 1
site <- 'test1'
selectdb <- 'test1'
singleFile <- NULL
GENERATE_CLICKS <- FALSE
GENERATE_WHISTLES <- TRUE
if (!is.null(selectdb)) {
binaryfolder <- gsub(' ', '', paste(binaryfolder, '/', selectdb))
selectdb <- gsub(' ', '', paste(selectdb, '.sqlite3'))
}
for (fileN in fileN1:fileN2) {
filename <- dir(dbfolder)[fileN]
if (!is.null(selectdb)) {
filename <- selectdb
}
print(sprintf('Loading file %s/%s: %s', fileN, fileN2, filename))
dbname = sprintf('%s/%s', dbfolder, filename)
con <- dbConnect(drv=RSQLite::SQLite(), dbname=dbname)
tables <- dbListTables(con)
if (length(tables) > 0) {
saq <- dbGetQuery(conn=con, statement="SELECT * FROM Sound_Acquisition")
saq$SystemName <- str_remove_all(saq$SystemName, " ")
if (!is.null(singleFile)) {
saq <- subset(saq, SystemName==singleFile)
}
for (item in unique(saq$Status)) {
if (grepl("Start", item)) {
saq <- subset(saq, Status == item)
}
}
dbDisconnect(con)
sr <- as.integer(saq$sampleRate[1])
temp_res <- 0.0213333                       #INPUT TEMPORAL RESOLUTION OF FFT USED FOR WHISTLE DETECTION
myStudy <- retrieveDetections(dbname=dbname, binaryfolder=binaryfolder, sr=sr)
##GENERATE CLICK DETECTION FRAMES
if (GENERATE_CLICKS == TRUE) {
clickInfo <- clickData(myStudy, fft=as.integer(.00533333*sr)+1, selectEvent=singleFile)
cdata <- clickInfo[[1]]
if (class(cdata) == 'data.frame') {
if (dim(cdata)[1] > 1) {
noise <- clickInfo[[4]]
noise[is.na(noise)] <- 0
newnoise <- c()
for (i in 1:length(noise)) {
if (i < length(noise)) {
n1 <- noise[i]
n2 <- noise[i+1]
new <- seq(n1, n2, (n2-n1)/17)
new <- new[1:length(new)-1]
for (val in new) {
newnoise <- append(newnoise, val)
}
} else {
newnoise <- append(newnoise, noise[i])
}
}
noise <- newnoise - min(newnoise)
a <- saq$UTC[1]
hr1 <- hour(a)
min1 <- minute(a)
sec1 <- second(a)
time1 <- 3600*hr1 + 60*min1 + sec1
a <- cdata$UTC[1]
hr2 <- hour(a)
min2 <- minute(a)
sec2 <- second(a)
time2 <- 3600*hr2 + 60*min2 + sec2
dt <- time2 - time1
cfilt <- filterClicks(cdata, dt=0)
if (dim(cfilt)[1] > 1) {
startrec <- cfilt$eventId[1]
endrec <- cfilt$eventId[dim(cfilt)[1]]
avSpec <- calculateAverageSpectra(myStudy, ev=startrec, window=FALSE,
wl=as.integer(.00533333*sr)+1, noise=FALSE,
plot=c(FALSE, FALSE))
spec <- avSpec$allSpec[,avSpec$UID %in% cfilt$UID]
nspec <- noise
if (sum(nspec) != 0) {
if (is.null(dim(nspec))) {
x <- nspec
L <- 1
} else {
x <- rowMeans(nspec)
L <- dim(nspec)[2]
}
y0 <- as.integer(10*length(x)/(sr/2000))
y1 <- as.integer(40*length(x)/(sr/2000))
n <- rollmeanr(x, k=3)
n <- n[y0:y1]
n <- n - min(n)
n <- n/sum(n)
ndata <- data.frame()
ndata <- rbind(ndata, n)
names(ndata) <- seq(1, dim(ndata)[2])
ndata <- cbind(n=L, ndata)
ndata <- cbind(rec_id=startrec, ndata)
ndata <- cbind(site='none', ndata)
rec0 <- startrec
}
ind1 <- gregexpr('_', filename)[[1]][1]
ind2 <- gregexpr('.sqlite', filename)[[1]][1]
name <- substr(filename, ind1+1, ind2-1)
if (!is.null(singleFile)) {
f <- substr(singleFile, 1, nchar(singleFile)-4)
name <- gsub(' ', '', paste(name, '_', f))
}
createClickSpectra(subsub=cfilt, spec=spec, nspec=nspec, site=site, nmin=3, sr=sr,
startrect0=0, startrec=startrec, endrec=endrec, include_empty = TRUE, remove_dups=FALSE,
dest=sprintf('%s/clickspectra_%s.csv', savefolder, name), file=NULL)
}
}
}
}
#GENERATE WHISTLE DETECTION FRAMES
if (GENERATE_WHISTLES == TRUE) {
whistleInfo <- whistleData(myStudy, selectEvent=singleFile)
wdata <- whistleInfo[[1]]
bwdata <- whistleInfo[[2]]
if (class(wdata) == 'data.frame') {
if (dim(wdata)[1] > 1) {
a <- saq$UTC[1]
hr1 <- hour(a)
min1 <- minute(a)
sec1 <- second(a)
time1 <- 3600*hr1 + 60*min1 + sec1
a <- wdata$UTC[1]
hr2 <- hour(a)
min2 <- minute(a)
sec2 <- second(a)
time2 <- 3600*hr2 + 60*min2 + sec2
dt <- time2-time1
wfilt <- filterWhistles(wdata, dt=0)
ind1 <- gregexpr('_', filename)[[1]][1]
ind2 <- gregexpr('.sqlite', filename)[[1]][1]
name <- substr(filename, ind1+1, ind2-1)
if (!is.null(singleFile)) {
f <- substr(singleFile, 1, nchar(singleFile)-4)
name <- gsub(' ', '', paste(name, '_', f))
}
createWhistleSpectra(wdata=wfilt, bwdata=bwdata, temp_res=temp_res, startrect0=0, startrec=startrec, endrec=endrec, site=site, f0=0, f1=7200,
min_combined_bandwidth = 0, min_bandwidth = 0, dd_thr=0.0, include_empty=TRUE, remove_dups=FALSE,
dest=sprintf('%s/%s/whistlespectra_%s.csv', savefolder, site, name))
}
}
}
} else {
dbDisconnect(con)
}
}
# (1) Set the appropriate working directory
dir_path <- tcltk::tk_choose.dir(caption="Select folder with eventClassifier")
setwd(dir_path)
# (4) Run app
shiny::runApp('eventClassifier')
# (4) Run app
shiny::runApp('eventClassifier')
# (4) Run app
shiny::runApp('eventClassifier')
# (4) Run app
shiny::runApp('eventClassifier')
